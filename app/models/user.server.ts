import bcrypt from "bcryptjs";
import { db } from "~/db.server";
import { Table } from "ts-sql-query/Table";

class User extends Table {
  id = this.autogeneratedPrimaryKey("id", "uuid");
  email = this.column("email", "string");
  passwordHash = this.column("password_hash", "string");
  createdAt = this.column("created_at", "timestamp");
  updatedAt = this.column("updated_at", "timestamp");

  constructor() {
    super("users");
  }
}

const user = new User();

export async function getUserById(id: User["id"]) {
  return db.selectFrom(user).where(user.id.equals(id)).executeSelectNoneOrOne();
}

export async function getUserByEmail(email: User["email"]) {
  return db
    .selectFrom(user)
    .where(user.email.equals(email))
    .executeSelectNoneOrOne();
}

export async function createUser(email: User["email"], password: string) {
  const hashedPassword = await bcrypt.hash(password, 10);

  return db
    .insertInto(user)
    .set({
      email: email,
      passwordHash: hashedPassword,
    })
    .returningLastInsertedId()
    .executeInsert();
}

export async function deleteUserByEmail(email: User["email"]) {
  return db.where(user.email.equals(email)).executeDelete();
}

export async function verifyLogin(
  email: User["email"],
  password: User["passwordHash"]
) {
  const userWithPassword = await db
    .selectFrom(user)
    .where(user.email.equals(email))
    .select({ id: user.id, email: user.email, passwordHash: user.passwordHash })
    .executeSelectNoneOrOne();

  if (!userWithPassword) {
    return null;
  }

  const isValid = await bcrypt.compare(password, userWithPassword.passwordHash);

  if (!isValid) {
    return null;
  }

  const { passwordHash: _password, ...userWithoutPassword } = userWithPassword;

  return userWithoutPassword;
}
